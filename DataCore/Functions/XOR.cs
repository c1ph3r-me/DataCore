using System.Collections.Generic;

namespace DataCore.Functions
{
    /// <summary>
    /// Original XOR class provided by Glandu2 and adapted originally by xXExiledXx for C# 
    /// adapted and restructed for Portal by iSmokeDrow.
    /// 
    /// </summary>
	public class XOR
	{
        /// <summary>
        /// Legend of non-encrypted file extensions (files that will not be encoded during patching)
        /// </summary>
        public static List<string> UnencryptedExtensions { get; set; } = new List<string> { "mp3", "ogg", "raw", "dds", "tga", "naf", "nx3", "cob", "nfm" };

        /// <summary>
        /// Table of bytes to use for encoding files during patching
        /// </summary>
		static byte[] s_CipherTable = new byte[]
		{
			119,
			232,
			94,
			236,
			183,
			78,
			193,
			135,
			79,
			230,
			245,
			60,
			31,
			179,
			21,
			67,
			106,
			73,
			48,
			166,
			191,
			83,
			168,
			53,
			91,
			229,
			158,
			14,
			65,
			236,
			34,
			184,
			212,
			128,
			164,
			140,
			206,
			101,
			19,
			29,
			75,
			8,
			90,
			106,
			187,
			111,
			173,
			37,
			184,
			221,
			204,
			119,
			48,
			116,
			172,
			140,
			90,
			74,
			154,
			155,
			54,
			188,
			83,
			10,
			60,
			248,
			150,
			11,
			93,
			170,
			40,
			169,
			178,
			130,
			19,
			110,
			241,
			193,
			147,
			169,
			158,
			95,
			32,
			207,
			212,
			204,
			91,
			46,
			22,
			245,
			201,
			76,
			178,
			28,
			87,
			238,
			20,
			237,
			249,
			114,
			151,
			34,
			27,
			74,
			164,
			46,
			184,
			150,
			239,
			75,
			63,
			142,
			171,
			96,
			93,
			127,
			44,
			184,
			173,
			67,
			173,
			118,
			143,
			95,
			146,
			230,
			78,
			167,
			212,
			71,
			25,
			107,
			105,
			52,
			181,
			14,
			98,
			109,
			164,
			82,
			185,
			227,
			224,
			100,
			67,
			61,
			227,
			112,
			245,
			144,
			179,
			162,
			6,
			66,
			2,
			152,
			41,
			80,
			63,
			253,
			151,
			88,
			104,
			1,
			140,
			30,
			15,
			239,
			139,
			179,
			65,
			68,
			150,
			33,
			168,
			218,
			94,
			139,
			74,
			83,
			27,
			253,
			245,
			33,
			63,
			247,
			186,
			104,
			71,
			249,
			101,
			223,
			82,
			206,
			224,
			222,
			236,
			239,
			205,
			119,
			162,
			14,
			188,
			56,
			47,
			100,
			18,
			141,
			240,
			92,
			224,
			11,
			89,
			214,
			45,
			153,
			205,
			231,
			1,
			21,
			224,
			103,
			244,
			50,
			53,
			212,
			17,
			33,
			195,
			222,
			152,
			101,
			237,
			84,
			157,
			28,
			185,
			176,
			170,
			169,
			12,
			138,
			180,
			102,
			96,
			225,
			255,
			46,
			200,
			0,
			67,
			169,
			103,
			55,
			219,
			156,
			119,
			232,
			94,
			236,
			183,
			78,
			193,
			135,
			79,
			230,
			245,
			60,
			31,
			179,
			21,
			67,
			106,
			73,
			48,
			166,
			191,
			83,
			168,
			53,
			91,
			229,
			158,
			14,
			65,
			236,
			34,
			184,
			212,
			128,
			164,
			140,
			206,
			101,
			19,
			29,
			75,
			8,
			90,
			106,
			187,
			111,
			173,
			37,
			184,
			221,
			204,
			119,
			48,
			116,
			172,
			140,
			90,
			74,
			154,
			155,
			54,
			188,
			83,
			10,
			60,
			248,
			150,
			11,
			93,
			170,
			40,
			169,
			178,
			130,
			19,
			110,
			241,
			193,
			147,
			169,
			158,
			95,
			32,
			207,
			212,
			204,
			91,
			46,
			22,
			245,
			201,
			76,
			178,
			28,
			87,
			238,
			20,
			237,
			249,
			114,
			151,
			34,
			27,
			74,
			164,
			46,
			184,
			150,
			239,
			75,
			63,
			142,
			171,
			96,
			93,
			127,
			44,
			184,
			173,
			67,
			173,
			118,
			143,
			95,
			146,
			230,
			78,
			167,
			212,
			71,
			25,
			107,
			105,
			52,
			181,
			14,
			98,
			109,
			164,
			82,
			185,
			227,
			224,
			100,
			67,
			61,
			227,
			112,
			245,
			144,
			179,
			162,
			6,
			66,
			2,
			152,
			41,
			80,
			63,
			253,
			151,
			88,
			104,
			1,
			140,
			30,
			15,
			239,
			139,
			179,
			65,
			68,
			150,
			33,
			168,
			218,
			94,
			139,
			74,
			83,
			27,
			253,
			245,
			33,
			63,
			247,
			186,
			104,
			71,
			249,
			101,
			223,
			82,
			206,
			224,
			222,
			236,
			239,
			205,
			119,
			162,
			14,
			188,
			56,
			47,
			100,
			18,
			141,
			240,
			92,
			224,
			11,
			89,
			214,
			45,
			153,
			205,
			231,
			1,
			21,
			224,
			103,
			244,
			50,
			53,
			212,
			17,
			33,
			195,
			222,
			152,
			101,
			237,
			84,
			157,
			28,
			185,
			176,
			170,
			169,
			12,
			138,
			180,
			102,
			96,
			225,
			255,
			46,
			200,
			0,
			67,
			169,
			103,
			55,
			219,
			156
		};

        /// <summary>
        /// Performs an crypto-ciper on given buffer
        /// </summary>
        /// <param name="buffer">Byte collection to be encrypted</param>
        /// <param name="index">Index to perform encryption on buffer</param>
        public static void Cipher(ref byte[] buffer, ref byte index)
        {
            for (int i = 0; i < buffer.Length; i++)
            {
                buffer[i] ^= s_CipherTable[index];
                index++;
            }
        }

        /// <summary>
        /// Determines if a specific file extension is to be encrypted or not
        /// </summary>
        /// <param name="ext">File extension (.dds etc) to be checked</param>
        /// <returns>true/false</returns>
		public static bool Encrypted(string ext)
		{
            return !UnencryptedExtensions.Contains(ext);
		}
	}
}
